class CommentsController < ApplicationController
  before_action :set_comment, only: [:show, :edit, :update, :destroy]
  before_filter :authenticate_user!

  # GET /comments
  # GET /comments.json
  def index
    @comments = commentable.comments.hash_tree(limit_depth: 5)
  end

  # GET /comments/1
  # GET /comments/1.json
  def show
    @comment = commentable.comments.find(params[:id])
  end

  # GET /comments/new
  def new
    @comment = Comment.new(parent_id: params[:parent_id])
  end

  # GET /comments/1/edit
  def edit
  end

  # POST /comments
  # POST /comments.json
  def create
    if params[:comment][:parent_id].to_i > 0
      parent = Comment.find_by_id(params[:comment].delete(:parent_id))
      @comment = parent.children.build(comment_params)
    else
      @comment = Comment.new(comment_params)
      if params[:commentable_type].present?
        @comment.commentable_type = params[:commentable_type]
      end
      if params[:commentable_if].present?
        @comment.commentable_id = params[:commentable_id]
      end
      @comment.user_id = current_user.id
    end

    if @comment.save
      flash[:success] = 'Your comment was successfully added.'
      redirect_to :action => :index
      else
        format.html { render :new }
        format.json { render json: @comment.errors, status: :unprocessable_entity }
      end

    # respond_to do |format|
    #   if @comment.save
    #     format.html { redirect_to @comment, notice: 'Comment was successfully created.' }
    #     format.json { render :show, status: :created, location: @comment }
    #   else
    #     format.html { render :new }
    #     format.json { render json: @comment.errors, status: :unprocessable_entity }
    #   end
    # end
  end

  # comments_controller

  # a little more ugly than Ryan suggests
  def commentable
    if request.path.include?('petition') # be careful. any path with 'blog' in it will match
      Petition.find(params[:commentable_id]) 
    else 
      fail 'unnable to determine commentable type'
    end
  end

  # PATCH/PUT /comments/1
  # PATCH/PUT /comments/1.json
  def update
    if @comment.update(comment_params)
      flash[:success] = 'Your comment was successfully updated.'
      redirect_to :action => :index
      # redirect_to root_url
    else
      render 'new'
    end

    # respond_to do |format|
    #   if @comment.update(comment_params)
    #     format.html { redirect_to @comment, notice: 'Comment was successfully updated.' }
    #     format.json { render :show, status: :ok, location: @comment }
    #   else
    #     format.html { render :edit }
    #     format.json { render json: @comment.errors, status: :unprocessable_entity }
    #   end
    # end
  end

  # DELETE /comments/1
  # DELETE /comments/1.json
  def destroy
    @comment.destroy
    respond_to do |format|
      format.html { redirect_to comments_url, notice: 'Comment was successfully destroyed.' }
      format.json { head :no_content }
    end
  end

  private
    # Use callbacks to share common setup or constraints between actions.
    def set_comment
      @comment = Comment.find(params[:id])
    end

    # Never trust parameters from the scary internet, only allow the white list through.
    def comment_params
      params.require(:comment).permit(:text, :user_id, :parent_id, :commentable_type, :commentable_id)
    end
end

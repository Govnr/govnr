class CommentsController < ApplicationController
  before_filter :authenticate_user!

  def index
    if commentable_class.present?
      @comments = commentable_class.comments.hash_tree(limit_depth: 5)
    elsif 
      @comments = Comment.hash_tree(limit_depth: 5)
    end
  end

  def new
    @comment = Comment.build_from(commentable, current_user.id, nil)
    @comment.parent_id = params[:parent_id]
  end

  def create
    @comment = Comment.build_from(commentable, current_user.id, comment_params[:text])
    if @comment.save
      @comment.move_to_child_of(Comment.find(comment_params[:parent_id])) if comment_params[:parent_id].present?
      redirect_to commentable_path, notice: "Comment saved!"
    else
      render :new
      flash[:error] = "Comment didn't save!" + @comment.errors.to_a.join
    end
  end

  def edit
    @commentable = commentable
    @comment = Comment.find(params[:id]).decorate
  end

  def update
    @commentable = commentable_class.find(comment_params[:commentable_id])
    @comment = Comment.find(params[:id]).decorate
    if @comment.update_attributes(comment_params)
      redirect_to commentable_path, notice: "Comment saved!"
    else
      render :edit
    end
  end

  def destroy
    @commentable = commentable_class.find(params[:commentable_id]).decorate
    @comment = Comment.find(params[:id])
    @comment.destroy
    redirect_to commentable_path, notice: "Deleted!"
  end

private
  def commentable
   Petition.find_by_id(params[:petition_id]) if params[:petition_id]
  end

  def commentable_class
    unless comment_params[:commentable_type].present?
      raise "Error, no commentable_type present."
    end
    if params[:commentable_type] == 'petition'
      Petition
    end
  end

  def commentable_path
    if comment_params[:commentable_type] == 'petition'
      petition_path(comment_params[:commentable_id])
    end
  end

  def comment_params
    params.require(:comment).permit(:text, :commentable_type, :commentable_id, :parent_id, :user_id )
  end
end